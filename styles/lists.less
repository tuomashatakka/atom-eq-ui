
@list-item-height:  2rem;
@list-item-inset:   3rem;
@list-item-background-color-active:       desaturate(lighten(@background-color-selected, 0%), 1%);
@list-item-background-color-hover:        desaturate(lighten(@background-color-selected, 4%), 2%);
@list-item-background-color-active-hover: desaturate(lighten(@background-color-selected, 6%), 3%);

.li-state (@class, @color) {
  li.list-item@{class},
  li.list-nested-item@{class} > .list-item {
    color: var(--color);
    .with-selected-variant(@@color);
    .with-hovered-variant(@@color);
  }
}

.li-text-color (@state) {
  @classname: ~".text-@{state}";
  @varname: ~"text-color-@{state}";
  .li-state(@classname, @varname) }

.li-status-color (@state) {
  @classname:      ~".status-@{state}";
  @varname:        ~"text-color-@{state}";
  .li-state(@classname, @varname) }

.li-status-subtle (@state) {
  @classname:      ~".status-@{state}";
  @varname:        ~"text-color-subtle";
  .li-state(@classname, @varname) }

.match () {

  & span.character-match {
    font-size: inherit !important;
    // font-size: ~"calc((@{font-size} - 3px) * var(--size, 100) / 100)" !important;
  }
}



// Regular trees & list groups

.list-group,
.list-tree {
  .scaled-text();

  li .character-match {
    transition: @transition-color }

  li.selected .character-match {
    .scaled-text() }

  li.selected .word {
    color: @text-color-selected !important }

  // Backdrop for the list items
  li::before {
    content:    "";
    position:   absolute;
    display:    block;
    z-index:   -1;
    top:        0;
    left:      -1em;
    right:      0;
    bottom:     0;
    height:     auto;
    transition: .25s background-color }

  li:not(.list-nested-item):hover::before {
    background: @list-item-background-color-hover }

  li.selected::before {
    background: @list-item-background-color-active }

  li.selected:hover::before {
    background: @list-item-background-color-active-hover }

  li.selected::before,
  li.selected:hover::before {
    transition-duration: .1s;
    z-index:    0;
    left:      -1em }

  li {
    .text(normal);
    position: relative;
    color: var(--color);
    transition: @transition-color }

  li.list-item {
    display: block }

  li:not(.list-nested-item),
  li.list-nested-item > .list-item {
    .text(normal);
    color: var(--color);
    min-height: @list-item-height !important;
    line-height: @list-item-height;
    .with-selected-variant(@text-color);
    .with-hovered-variant(@text-color);
    .with-active-variant(@text-color) }

  .li-text-color(info);
  .li-text-color(success);
  .li-text-color(warning);
  .li-text-color(error);
  .li-text-color(subtle);
  .li-text-color(selected);
  .li-status-color(added);
  .li-status-color(renamed);
  .li-status-color(modified);
  .li-status-color(removed);
  .li-status-subtle(ignored);

  li.list-item.selected,
  li.list-nested-item.selected > .list-item {
    .text(selected);
    .scaled-text();
  }

  .icon {
    display:  inline-block;
    height:   inherit;

    &::before {
      line-height:    1em;
      height:         1em;
      width:          1em;
      top:            initial;
      vertical-align: middle }
  }
}

.list-tree.has-collapsable-children .list-nested-item {

  &.collapsed > .list-item::before,
  > .list-item::before {
    content:          "\f078";
    top:              0 !important;
    left:             0 !important;
    right:            0 !important;
    bottom:           0 !important;
    margin:           0 !important;
    height:           1.4em !important;
    line-height:      1.4em !important;
    width:            1.4em !important;
    transform:        rotate(90deg);
    display:          block;
    text-align:       center;
    transform-origin: center;
    transition:
      @transition-time transform,
      @transition-time color }


  // Animated caret rotation

  > .list-item:hover::before {
    transform: rotate(90deg) }

  &.collapsed > .list-item::before {
    content:   "\f078";
    transform: rotate(0deg) }

  &.collapsed > .list-item:hover::before {
    transform: rotate(0deg) }

}


// Select lists

ul.list-group,
ol.list-group,
.modal.select-list ol.list-group,
.modal .select-list ol.list-group,
.select-list ol.list-group {

  li {
    .with-selected-variant(@text-color);
    .with-hovered-variant(@text-color);
    .with-active-variant(@text-color);

    color:       var(--color);
    padding:     @component-padding / 4 @component-padding;
    line-height: @list-item-height - @component-padding / 2;
  }

  li.two-lines {
    .primary-line {
      margin-top: 0;
      padding-top: 0;
      margin-bottom: 0;
      padding-bottom: 0;
      .text(label) }

    .secondary-line {
      .text(subtle);
      .scaled-text();
        margin-top: 0;
        padding-top: 0;
        margin-bottom: 0;
        padding-bottom: 0 }

    &.selected .secondary-line {
      .text(selected) }

    .secondary-line:empty {
      display: none !important }
  }

  li.selected {
    border-radius:    0 !important;
    background-color: @background-color-selected }

  li .character-match {
    .text(normal) }

  li.selected .character-match {
    .text(selected) }


    .two-lines .status.icon {
      justify-content: center;
      align-items: center;
      position:   absolute;
      display:    flex;
      bottom:     0;
      width:      3em;
      right:      0;
      top:        0;
    }

    .two-lines .status::before {
      margin: 0;
      .scaled-text()
    }

  li .status-icon {
    float: right;
    margin-left: @component-icon-padding;

    &:before { margin-right: 0 }}

  li.selected .status.icon {
    color: @text-color-selected }

  li pre {
    margin-bottom: 0 }

  li,
  span,
  span.title,
  span[title] {
    font-weight: inherit !important;
    font-family: inherit !important;
    .scaled-text();

    &.selected {
      font-weight: 600 !important;
      letter-spacing: -0.007em }
  }

  &.mark-active {
    li::before {
      content:          '';
      left:             auto;
      right:            auto;
      display:          inline-block;
      position:         static;
      background-color: transparent;
      width:            @list-active-icon-size;
      height:           @list-active-icon-size;
      margin-right:     @component-icon-padding }

    li.active {
      .octicon(check, @list-active-icon-size) }

    li.active::before {
        color: @text-color-success }
  }
}



// Popover lists

.select-list.popover-list {
  .overlay-shadow();
  --background-color: @overlay-background-color;

  border:         1px solid @overlay-border-color !important;
  background:     var(--background-color);
  border-radius:  @component-border-radius !important;

  atom-text-editor {
    margin-bottom: @component-padding / 6 }

  .list-group li {
    padding-left: @component-padding;
    transition: color @transition-time ease }
}


// Lists' sortable interface

.ui-sortable li {
  line-height: @list-item-height }

.ui-sortable li.ui-sortable-placeholder {
  visibility: visible !important;
  background: var(--background-color);
  .dimmed(3) }

li.ui-draggable-dragging,
li.ui-sortable-helper {
  list-style:   none;
  line-height:  @list-item-height;
  height:       @list-item-height;
  padding:      0 @component-padding;
  background:   @background-color-highlight
}


// Outline
.outline-view-trees.has-collapsable-children {
  --size: 75;

  .list-nested-item > .list-tree > .list-item {
    padding-left: @list-item-inset;
  }

  .list-item span {
    font-weight: 200;
  }
}


.list-group li.selected::before,
.list-tree li.selected::before {
  line-height: inherit;
  height:      inherit }



// List group

ul.list-group,
ol.list-group {

  .modal .select-list &,
  .modal.select-list &,
  .select-list &,
  & {

    li {
      .match()
    }

    li.two-lines {
      font-size: ~"calc(@{font-size} * var(--size, 100) / 100)";
      letter-spacing: 1px !important;
      font-weight: 300;

      .primary-line {
        font-size: inherit !important;
        letter-spacing:inherit;
        color: @text-color;
        .match()
      }

      .secondary,
      .secondary-line {
        font-size: inherit !important;
        letter-spacing:inherit;
        font-weight: inherit;
        color: @text-color-subtle;
        .match()
      }
    }
  }
}
